import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import plotly.express as px
from wordcloud import WordCloud

st.set_page_config(
     page_title="An치lise Explorat칩ria",
     page_icon="游꺗",
     layout="wide",
     initial_sidebar_state="expanded",
     menu_items={}
 )

## Abertura de arquivo e cria칞칚o do dataframe:
@st.experimental_memo
def carrega_base(path):
    data = pd.read_csv(path, sep=",", low_memory=True)
    data.drop_duplicates(subset='tweet_id', keep='first', inplace=True)
    return data

df = carrega_base('data/corpus_labeled/iguais/bases_tcc/03_geracao_carcteristicas_base.csv')
dfA1 = carrega_base("data/corpus_labeled/rotula칞ao1[anisiofilho].csv")
dfB1 = carrega_base("data/corpus_labeled/rotula칞ao1[debora].csv")
dfA2 = carrega_base("data/corpus_labeled/rotula칞ao2[anisiofilho].csv")
dfB2 = carrega_base("data/corpus_labeled/rotula칞ao2[andre].csv")

## Fun칞칫es
### M칩dulos
#### Ajustador de turnos
def ajusta_turno(linha):
    return linha.capitalize()

##### Ajustador de usu치rios
def ajusta_usuarios(linha):
    if linha == 'invalid_user':
        return 'Usu치rio Inv치lido'
    else:
        return linha

#### Ajustador de estados
def ajusta_estados(linha):
    if linha == 'invalidstate':
        return 'Inv치lido (Usu치rio n칚o informou sua localiza칞칚o)'
    elif linha == 'notbrazilstate':
        return 'Exterior (Fora do Brasil)'
    elif linha == 'statenotdefined':
        return 'Brasil (Localiza칞칚o definida apenas como Brasil)'
    else:
        return linha

#### Ajustador de regi칫es
def ajusta_regioes(linha):
    if linha == 'invalidregion':
        return 'Inv치lido<br>(Usu치rio n칚o informou sua localiza칞칚o)'
    elif linha == 'notbrazilregion':
        return 'Exterior<br>(Fora do Brasil)'
    elif linha == 'regionnotdefined':
        return 'Brasil<br>(Localiza칞칚o definida apenas como Brasil)'
    else:
        return linha

#### Ajustador de r칩tulos
def ajusta_rotulo(linha):
    if linha == -1:
        return 'Not칤cia Verdadeira'
    elif linha == 0:
        return 'Opini칚o'
    elif linha == 1:
        return 'Not칤cia Falsa'

### Contador de frequ칡ncia de palavras:
def gera_frequencia_palavras(dicionario_frequencia, dataframe, coluna, rotulo):
    for index, row in dataframe.iterrows():
        if row.label_A == rotulo:
            row[coluna] = eval(row[coluna])
            for palavra in row[coluna]:
                
                if palavra not in dicionario_frequencia.keys():
                    dicionario_frequencia[palavra] = 1
                else:
                    dicionario_frequencia[palavra] += 1
    
    dicionario_frequencia = dict(sorted(dicionario_frequencia.items(), key=lambda item: item[1]))
    
    return dicionario_frequencia

### Gerador de nuvem de palavras
def gera_nuvem_palavras(dicionario_frequencia):
    wordcloud = WordCloud(#font_path=None, 
                        width=800, 
                        height=400, 
                        margin=2, 
                        ranks_only=None, 
                        prefer_horizontal=0.9, 
                        mask=None, 
                        scale=1, 
                        color_func=None, 
                        max_words=500, 
                        min_font_size=4, 
                        stopwords=None, 
                        random_state=None, 
                        background_color='white', 
                        max_font_size=None, 
                        font_step=1, 
                        mode='RGB', 
                        relative_scaling='auto', 
                        regexp=None, 
                        collocations=True, 
                        colormap='hsv', 
                        normalize_plurals=True, 
                        contour_width=0, 
                        contour_color='black', 
                        repeat=False, 
                        include_numbers=False, 
                        min_word_length=0, 
                        collocation_threshold=30).generate_from_frequencies(dicionario_frequencia)
    
    fig, ax = plt.subplots(figsize=(16,8))
    ax.imshow(wordcloud, interpolation='bilinear')       
    ax.set_axis_off()
    
    return fig, wordcloud

## Main
st.header("An치lise Explorat칩ria da Base de Dados")

st.header("Vis칫es")
with st.expander("Turnos"):
    coluna_turnos_grafico, coluna_turnos_rotulos = st.columns(2)
    with coluna_turnos_grafico:
        #### Gr치fico de turnos
        df_turnos_grafico = df.time_shift.value_counts().reset_index()
        df_turnos_grafico.rename(columns={'index':'Turno','time_shift':'Quantidade'}, inplace=True)
        df_turnos_grafico['Turno'] = df_turnos_grafico['Turno'].map(ajusta_turno)

        fig1 = px.bar(df_turnos_grafico, 
                    x='Turno', 
                    y='Quantidade', 
                    title='Quantidade de postagens por turno', 
                    text_auto=True,
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig1, use_container_width=True)

    with coluna_turnos_rotulos:
        #### Gr치fico de r칩tulo por turno
        df_turnos_rotulos = df[['time_shift', 'label_A']].value_counts().reset_index()
        df_turnos_rotulos.rename(columns={'time_shift':'Turno','label_A':'R칩tulo', 0:'Quantidade'}, inplace=True)
        df_turnos_rotulos.sort_values(by='Quantidade', ascending=False, inplace=True)
        df_turnos_rotulos['Turno'] = df_turnos_rotulos['Turno'].map(ajusta_turno) 
        df_turnos_rotulos['R칩tulo'] = df_turnos_rotulos['R칩tulo'].map(ajusta_rotulo)

        fig5 = px.bar(df_turnos_rotulos, 
                    x='R칩tulo', 
                    y='Quantidade', 
                    color='Turno',
                    color_discrete_map={
                                            'Manh칚':'tomato',
                                            'Tarde':'yellowgreen',
                                            'Noite':'steelblue',
                                        },
                    barmode='group',
                    title='Quantidade de postagens de cada r칩tulo por turno',
                    text_auto=True,
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig5, use_container_width=True)

with st.expander("Usu치rios"):
    coluna_usuarios_grafico, coluna_usuario_rotulos = st.columns(2)
    with coluna_usuarios_grafico:
        #### Gr치fico de nomes de usu치rios
        df_usuarios_grafico = df.user_screen_name.value_counts().reset_index()[0:10]
        df_usuarios_grafico.rename(columns={'index':'Nome de usu치rio','user_screen_name':'Quantidade'}, inplace=True)
        df_usuarios_grafico.sort_values(by='Quantidade', ascending=True, inplace=True)
        df_usuarios_grafico['Nome de usu치rio'] = df_usuarios_grafico['Nome de usu치rio'].map(ajusta_usuarios)

        fig2 = px.bar(df_usuarios_grafico, 
                    y='Nome de usu치rio', 
                    x='Quantidade', 
                    title='Top 10: Usu치rios que mais postam', 
                    text_auto=True,
                    orientation='h',
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig2, use_container_width=True)
    
    with coluna_usuario_rotulos:
        #### Gr치fico de r칩tulo por nome de usu치rio
        lista_usuarios_top = df_usuarios_grafico['Nome de usu치rio'].to_list()
        lista_usuarios_top.append('invalid_user')

        df_usuario_rotulos = df[['user_screen_name', 'label_A']].value_counts().reset_index()
        df_usuario_rotulos = df_usuario_rotulos[df_usuario_rotulos['user_screen_name'].isin(lista_usuarios_top)]
        df_usuario_rotulos.rename(columns={'user_screen_name':'Nome de usu치rio','label_A':'R칩tulo', 0:'Quantidade'}, inplace=True)
        df_usuario_rotulos.sort_values(by=['Quantidade'], ascending=True, inplace=True)
        df_usuario_rotulos['R칩tulo'] = df_usuario_rotulos['R칩tulo'].map(ajusta_rotulo)
        df_usuario_rotulos['Nome de usu치rio'] = df_usuario_rotulos['Nome de usu치rio'].map(ajusta_usuarios)

        fig7 = px.bar(df_usuario_rotulos, 
                    y='Nome de usu치rio', 
                    x='Quantidade', 
                    color='R칩tulo',
                    color_discrete_map={
                                            'Not칤cia Falsa':'tomato',
                                            'Not칤cia Verdadeira':'yellowgreen',
                                            'Opini칚o':'steelblue',
                                        },
                    barmode='group',
                    title='Quantidade de postagens de cada r칩tulo por nome de usu치rio', 
                    text_auto=True,
                    orientation='h',
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig7, use_container_width=True)

with st.expander("Regi칫es"):
    coluna_regioes_grafico, coluna_regioes_rotulos = st.columns(2)
    with coluna_regioes_grafico:
        #### Gr치fico de Regi칫es
        df_regioes_grafico = df.region_location.value_counts().reset_index()
        df_regioes_grafico.rename(columns={'index':'Regi칚o','region_location':'Quantidade'}, inplace=True)
        df_regioes_grafico.sort_values(by='Quantidade', ascending=True, inplace=True)
        df_regioes_grafico['Regi칚o'] = df_regioes_grafico['Regi칚o'].map(ajusta_regioes)

        fig4 = px.bar(df_regioes_grafico, 
                    y='Regi칚o', 
                    x='Quantidade', 
                    title='Quantidade de postagens por Regi칚o do Brasil', 
                    text_auto=True, 
                    orientation='h',
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig4, use_container_width=True)

    with coluna_regioes_rotulos:
        #### Gr치fico de r칩tulo por regi칚o
        df_regioes_rotulos = df[['region_location', 'label_A']].value_counts().reset_index()
        df_regioes_rotulos.rename(columns={'region_location':'Regi칚o','label_A':'R칩tulo', 0:'Quantidade'}, inplace=True)
        df_regioes_rotulos.sort_values(by='Quantidade', ascending=True, inplace=True)
        df_regioes_rotulos['R칩tulo'] = df_regioes_rotulos['R칩tulo'].map(ajusta_rotulo) 
        df_regioes_rotulos['Regi칚o'] = df_regioes_rotulos['Regi칚o'].map(ajusta_regioes)

        fig6 = px.bar(df_regioes_rotulos, 
                    y='Regi칚o', 
                    x='Quantidade', 
                    color='R칩tulo',
                    color_discrete_map={
                                            'Not칤cia Falsa':'tomato',
                                            'Not칤cia Verdadeira':'yellowgreen',
                                            'Opini칚o':'steelblue',
                                        },
                    barmode='group',
                    title='Quantidade de postagens de cada r칩tulo por turno', 
                    text_auto=True,
                    orientation='h',
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig6, use_container_width=True)


with st.expander("Estados"):
    #### Gr치fico de Estados
    df_estados_grafico = df.state_location.value_counts().reset_index()
    df_estados_grafico.rename(columns={'index':'Estado','state_location':'Quantidade'}, inplace=True)
    df_estados_grafico.sort_values(by='Quantidade', ascending=True, inplace=True)
    df_estados_grafico['Estado'] = df_estados_grafico['Estado'].map(ajusta_estados)

    fig3 = px.bar(df_estados_grafico, 
                y='Estado', 
                x='Quantidade', 
                title='Quantidade de postagens por Unidade Federativa', 
                text_auto=True, 
                orientation='h',
                width=1000,
                height=600,
                )
    st.plotly_chart(fig3, use_container_width=True)

st.header("An치lise dos rotuladores")
with st.expander("Rotuladores"):
    coluna_dist_rotuloA1B1, coluna_dist_rotuloA2B2 = st.columns(2)
    with coluna_dist_rotuloA1B1:
        ### An치lises por classe entre os rotuladores
        #### Gr치fico de distribui칞칚o de classes entre os rotuladores A1 e B1
        df_dist_rotuloA1 = dfA1['label'].value_counts().reset_index()
        df_dist_rotuloA1['Rotulador'] = 'A1'
        df_dist_rotuloA1.rename(columns={'index':'R칩tulo', 'label':'Quantidade'}, inplace=True)
        df_dist_rotuloA1['R칩tulo'] = df_dist_rotuloA1['R칩tulo'].map(ajusta_rotulo)

        df_dist_rotuloB1 = dfB1['label'].value_counts().reset_index()
        df_dist_rotuloB1['Rotulador'] = 'B1'
        df_dist_rotuloB1.rename(columns={'index':'R칩tulo', 'label':'Quantidade'}, inplace=True)
        df_dist_rotuloB1['R칩tulo'] = df_dist_rotuloB1['R칩tulo'].map(ajusta_rotulo)

        df_dist_rotuloA1B1 = pd.concat([df_dist_rotuloA1, df_dist_rotuloB1])

        fig8 = px.bar(df_dist_rotuloA1B1, 
                    x='R칩tulo', 
                    y='Quantidade', 
                    color='Rotulador',
                    color_discrete_map={
                                            #'A1':'tomato',
                                            'A1':'yellowgreen',
                                            'B1':'steelblue',
                                        },
                    barmode='group',
                    title='Quantidade de cada r칩tulo por rotulador', 
                    text_auto=True,
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig8, use_container_width=True)

    with coluna_dist_rotuloA2B2:
        #### Gr치fico de distribui칞칚o de classes entre os rotuladores A2 e B2
        df_dist_rotuloA2 = dfA2['label'].value_counts().reset_index()
        df_dist_rotuloA2['Rotulador'] = 'A2'
        df_dist_rotuloA2.rename(columns={'index':'R칩tulo', 'label':'Quantidade'}, inplace=True)
        df_dist_rotuloA2['R칩tulo'] = df_dist_rotuloA2['R칩tulo'].map(ajusta_rotulo)

        df_dist_rotuloB2 = dfB2['label'].value_counts().reset_index()
        df_dist_rotuloB2['Rotulador'] = 'B2'
        df_dist_rotuloB2.rename(columns={'index':'R칩tulo', 'label':'Quantidade'}, inplace=True)
        df_dist_rotuloB2['R칩tulo'] = df_dist_rotuloB2['R칩tulo'].map(ajusta_rotulo)

        df_dist_rotuloA2B2 = pd.concat([df_dist_rotuloA2, df_dist_rotuloB2])

        fig9 = px.bar(df_dist_rotuloA2B2, 
                    x='R칩tulo', 
                    y='Quantidade', 
                    color='Rotulador',
                    color_discrete_map={
                                            #'A1':'tomato',
                                            'A2':'yellowgreen',
                                            'B2':'steelblue',
                                        },
                    barmode='group',
                    title='Quantidade de cada r칩tulo por rotulador', 
                    text_auto=True,
                    width=1000,
                    height=600,
                    )
        st.plotly_chart(fig9, use_container_width=True)

### Cria칞칚o de wordclouds por r칩tulo
st.header("Nuvem de palavras")
 #### Tweet_text_stemming
with st.expander("Stemming"):
    coluna_stemming_fake, coluna_stemming_news, coluna_stemming_opinion = st.columns(3)
    with coluna_stemming_fake:
        ##### Fake News
        stemming_fake_dict = dict()
        stemming_fake_dict = gera_frequencia_palavras(stemming_fake_dict, df, 'tweet_text_stemming', 1)

        stemming_fake_fig, stemming_fake_wordcloud = gera_nuvem_palavras(stemming_fake_dict)
        st.pyplot(stemming_fake_fig)
    
    with coluna_stemming_news:
        ##### News
        stemming_news_dict = dict()
        stemming_news_dict = gera_frequencia_palavras(stemming_news_dict, df, 'tweet_text_stemming', -1)

        stemming_news_fig, stemming_news_wordcloud = gera_nuvem_palavras(stemming_news_dict)
        st.pyplot(stemming_news_fig)

    with coluna_stemming_opinion:
        ##### Opinion
        stemming_opinion_dict = dict()
        stemming_opinion_dict = gera_frequencia_palavras(stemming_opinion_dict, df, 'tweet_text_stemming', -1)

        stemming_opinion_fig, stemming_opinion_wordcloud = gera_nuvem_palavras(stemming_opinion_dict)
        st.pyplot(stemming_opinion_fig)

#### Tweet_text_lemmatization
with st.expander("Lemmatization"):
    coluna_lemmatization_fake, coluna_lemmatization_news, coluna_lemmatization_opinion = st.columns(3)
    with coluna_lemmatization_fake:
        ##### Fake News
        lemmatization_fake_dict = dict()
        lemmatization_fake_dict = gera_frequencia_palavras(lemmatization_fake_dict, df, 'tweet_text_lemmatization', 1)

        lemmatization_fake_fig, lemmatization_fake_wordcloud = gera_nuvem_palavras(lemmatization_fake_dict)
        st.pyplot(lemmatization_fake_fig)

    with coluna_lemmatization_news:
        ##### News
        lemmatization_news_dict = dict()
        lemmatization_news_dict = gera_frequencia_palavras(lemmatization_news_dict, df, 'tweet_text_lemmatization', -1)

        lemmatization_news_fig, lemmatization_news_wordcloud = gera_nuvem_palavras(lemmatization_news_dict)
        st.pyplot(lemmatization_news_fig)

    with coluna_lemmatization_opinion:
        ##### Opinion
        lemmatization_opinion_dict = dict()
        lemmatization_opinion_dict = gera_frequencia_palavras(lemmatization_opinion_dict, df, 'tweet_text_lemmatization', -1)

        lemmatization_opinion_fig, lemmatization_opinion_wordcloud = gera_nuvem_palavras(lemmatization_opinion_dict)
        st.pyplot(lemmatization_opinion_fig)